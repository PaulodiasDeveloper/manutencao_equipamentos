import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import io
from datetime import datetime
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√µes gerais
plt.style.use("seaborn-v0_8")
sns.set_palette("Set2")

st.set_page_config(
    page_title="An√°lise Preditiva de Paradas", 
    layout="wide",
    page_icon="üîÆ"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {font-size: 2.5rem !important; justify-self: center; color: #008542;}
    .card { 
        background-color: #f0f2f6; 
        padding: 20px; 
        border-radius: 10px; 
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .metric-card {
        background-color: #ffffff; 
        padding: 15px; 
        border-radius: 10px; 
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        text-align: center;
        margin: 5px;
    }
    .highlight {background-color: #fff7e6; padding: 15px; border-radius: 10px;}
    .pred-positive {color: #ff4b4b; font-weight: bold;}
    .pred-negative {color: #0068c9; font-weight: bold;}
</style>
""", unsafe_allow_html=True)

# Cabe√ßalho
st.markdown('<p class="main-header">üîÆ An√°lise Preditiva de Paradas de Equipamentos</p>', unsafe_allow_html=True)
st.markdown("Este relat√≥rio apresenta an√°lise estat√≠stica e **preditiva** das paradas de equipamentos, com insights para gest√£o proativa da manuten√ß√£o.")

# =====================
# Upload ou leitura fixa
# =====================

with st.expander("üìÅ Carregar Dados", expanded=True):
    uploaded_file = st.file_uploader("Carregue a base de dados (Excel)", type=["xlsx"], label_visibility="collapsed")
    
    if uploaded_file:
        dados = pd.read_excel(uploaded_file)
        st.success(f"Base carregada com sucesso! {dados.shape[0]} registros e {dados.shape[1]} colunas.")
    else:
        st.warning("Por favor, carregue a base 'base_normalizada.xlsx' para iniciar a an√°lise.")
        st.stop()

# =====================
# Filtros na sidebar
# =====================

st.sidebar.header("üîç Filtros")

# Filtro de data se dispon√≠vel
date_cols = [col for col in dados.columns if 'data' in col.lower() or 'date' in col.lower()]
if date_cols and pd.api.types.is_datetime64_any_dtype(dados[date_cols[0]]):
    min_date = dados[date_cols[0]].min()
    max_date = dados[date_cols[0]].max()
    date_range = st.sidebar.date_input(
        "Per√≠odo", 
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )

locais = st.sidebar.multiselect(
    "Selecione os Locais", 
    options=dados["Local"].unique(), 
    default=dados["Local"].unique()
)

equipamentos = st.sidebar.multiselect(
    "Selecione os Equipamentos", 
    options=dados["Equipamento"].unique(), 
    default=dados["Equipamento"].unique()
)

# Aplicar filtros
filtro = dados[(dados["Local"].isin(locais)) & (dados["Equipamento"].isin(equipamentos))]

# Mostrar estat√≠sticas de filtragem
st.sidebar.markdown("---")
st.sidebar.markdown(f"**Registros filtrados:** {len(filtro)} de {len(dados)}")
st.sidebar.markdown(f"**Percentual:** {100*len(filtro)/len(dados):.1f}%")

# =====================
# KPIs no topo
# =====================

st.markdown("## üìà M√©tricas Principais")

col1, col2, col3, col4 = st.columns(4)

with col1:
    if "Tempo de Parada (h)" in filtro.columns:
        total_horas = filtro["Tempo de Parada (h)"].sum()
        st.metric("Total Horas Parada", f"{total_horas:.1f}h")
        
with col2:
    media_paradas = filtro["Tempo de Parada (h)"].mean() if "Tempo de Parada (h)" in filtro.columns else 0
    st.metric("Tempo M√©dio de Parada", f"{media_paradas:.1f}h")

with col3:
    total_ocorrencias = len(filtro)
    st.metric("Total Ocorr√™ncias", total_ocorrencias)

with col4:
    equipamentos_unicos = filtro["Equipamento"].nunique()
    st.metric("Equipamentos com Paradas", equipamentos_unicos)

# =====================
# An√°lise Preditiva
# =====================

st.markdown("## üîÆ An√°lise Preditiva")

# Preparar dados para modelagem preditiva
def preparar_dados_para_modelo(df):
    # Criar uma c√≥pia para n√£o modificar o original
    df_model = df.copy()
    
    # Codificar vari√°veis categ√≥ricas
    le = LabelEncoder()
    categorical_cols = ['Local', 'Equipamento', 'Identifica√ß√£o', 'Status', 'Causa']
    
    for col in categorical_cols:
        if col in df_model.columns:
            df_model[col] = le.fit_transform(df_model[col].astype(str))
    
    # Criar vari√°vel alvo: paradas longas (acima da m√©dia)
    if "Tempo de Parada (h)" in df_model.columns:
        tempo_medio = df_model["Tempo de Parada (h)"].mean()
        df_model['Parada_Longa'] = (df_model["Tempo de Parada (h)"] > tempo_medio).astype(int)
    
    return df_model

# Treinar modelo preditivo
def treinar_modelo(df):
    if "Parada_Longa" not in df.columns:
        st.error("N√£o foi poss√≠vel criar a vari√°vel alvo para o modelo.")
        return None, None, None
    
    # Selecionar features e target
    features = ['Local', 'Equipamento', 'Identifica√ß√£o', 'Status']
    X = df[[f for f in features if f in df.columns]]
    y = df['Parada_Longa']
    
    # Verificar se temos dados suficientes
    if len(X) < 10:
        st.warning("Dados insuficientes para treinar o modelo preditivo.")
        return None, None, None
    
    # Dividir em treino e teste
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Treinar modelo
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    # Fazer previs√µes
    y_pred = model.predict(X_test)
    
    # Calcular acur√°cia
    accuracy = accuracy_score(y_test, y_pred)
    
    return model, X, accuracy

# Aplicar prepara√ß√£o e modelagem
df_modelo = preparar_dados_para_modelo(filtro)
modelo, X, acuracia = treinar_modelo(df_modelo)

# Exibir resultados do modelo
if modelo is not None:
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìä Desempenho do Modelo Preditivo")
        st.metric("Acur√°cia do Modelo", f"{acuracia*100:.1f}%")
        st.caption("Previs√£o de paradas longas (acima da m√©dia)")
        
        # Import√¢ncia das features
        if hasattr(modelo, 'feature_importances_'):
            feature_importance = pd.DataFrame({
                'feature': X.columns,
                'importance': modelo.feature_importances_
            }).sort_values('importance', ascending=False)
            
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(x='importance', y='feature', data=feature_importance, ax=ax)
            ax.set_title("Import√¢ncia das Vari√°veis na Previs√£o", fontweight='bold')
            st.pyplot(fig)
    
    with col2:
        st.markdown("### üîç Previs√µes para Novos Dados")
        
        # Simular previs√£o para novos dados
        st.info("O modelo pode prever se uma nova parada tende a ser longa com base nas caracter√≠sticas do equipamento e local.")
        
        # Formul√°rio para simular previs√£o
        with st.form("form_previsao"):
            local_selecionado = st.selectbox("Local", options=dados["Local"].unique())
            equipamento_selecionado = st.selectbox("Equipamento", options=dados["Equipamento"].unique())
            identificacao_selecionada = st.selectbox("Identifica√ß√£o", options=dados["Identifica√ß√£o"].unique())
            status_selecionado = st.selectbox("Status", options=dados["Status"].unique())
            
            submitted = st.form_submit_button("Fazer Previs√£o")
            
            if submitted:
                # Codificar entradas como o modelo espera
                le = LabelEncoder()
                
                # Ajustar os label encoders com os dados originais
                for col in ['Local', 'Equipamento', 'Identifica√ß√£o', 'Status']:
                    le.fit(dados[col].astype(str))
                    
                    if col == 'Local':
                        local_encoded = le.transform([local_selecionado])[0]
                    elif col == 'Equipamento':
                        equipamento_encoded = le.transform([equipamento_selecionado])[0]
                    elif col == 'Identifica√ß√£o':
                        identificacao_encoded = le.transform([identificacao_selecionada])[0]
                    elif col == 'Status':
                        status_encoded = le.transform([status_selecionado])[0]
                
                # Fazer previs√£o
                nova_entrada = pd.DataFrame({
                    'Local': [local_encoded],
                    'Equipamento': [equipamento_encoded],
                    'Identifica√ß√£o': [identificacao_encoded],
                    'Status': [status_encoded]
                })
                
                # Garantir que as colunas est√£o na ordem correta
                nova_entrada = nova_entrada[X.columns]
                
                previsao = modelo.predict(nova_entrada)[0]
                probabilidade = modelo.predict_proba(nova_entrada)[0][1]
                
                if previsao == 1:
                    st.error(f"‚ö†Ô∏è Previs√£o: Parada LONGA (probabilidade: {probabilidade*100:.1f}%)")
                    st.write("Recomenda-se alocar mais recursos para minimizar o tempo de inatividade.")
                else:
                    st.success(f"‚úÖ Previs√£o: Parada CURTA (probabilidade: {(1-probabilidade)*100:.1f}%)")
                    st.write("Parada esperada dentro do tempo m√©dio hist√≥rico.")

# =====================
# Previs√£o de S√©rie Temporal
# =====================

if "Data In√≠cio" in filtro.columns:
    st.markdown("## üìÖ Previs√£o de S√©rie Temporal")
    
    try:
        # Preparar dados temporais
        filtro['Data In√≠cio'] = pd.to_datetime(filtro['Data In√≠cio'])
        series_temporal = filtro.groupby(filtro['Data In√≠cio'].dt.to_period('M')).agg({
            'Tempo de Parada (h)': 'sum',
            'Identifica√ß√£o': 'count'
        }).rename(columns={'Tempo de Parada (h)': 'Horas_Parada', 'Identifica√ß√£o': 'Ocorrencias'})
        series_temporal.index = series_temporal.index.to_timestamp()
        
        # Previs√£o simples usando m√©dia m√≥vel
        window = 3
        if len(series_temporal) > window:
            series_temporal['Previsao_Horas'] = series_temporal['Horas_Parada'].rolling(window=window).mean().shift(1)
            series_temporal['Previsao_Ocorrencias'] = series_temporal['Ocorrencias'].rolling(window=window).mean().shift(1)
            
            # Gr√°fico de previs√£o
            fig, ax = plt.subplots(2, 1, figsize=(12, 10))
            
            # Previs√£o de horas de parada
            ax[0].plot(series_temporal.index, series_temporal['Horas_Parada'], marker='o', label='Real', linewidth=2)
            ax[0].plot(series_temporal.index, series_temporal['Previsao_Horas'], marker='s', label='Previs√£o', linewidth=2)
            ax[0].set_title("Previs√£o de Horas de Parada (M√©dia M√≥vel)", fontweight='bold')
            ax[0].set_ylabel("Horas de Parada")
            ax[0].legend()
            ax[0].grid(True, alpha=0.3)
            
            # Previs√£o de ocorr√™ncias
            ax[1].plot(series_temporal.index, series_temporal['Ocorrencias'], marker='o', label='Real', linewidth=2)
            ax[1].plot(series_temporal.index, series_temporal['Previsao_Ocorrencias'], marker='s', label='Previs√£o', linewidth=2)
            ax[1].set_title("Previs√£o de N√∫mero de Ocorr√™ncias (M√©dia M√≥vel)", fontweight='bold')
            ax[1].set_ylabel("N√∫mero de Ocorr√™ncias")
            ax[1].set_xlabel("Data")
            ax[1].legend()
            ax[1].grid(True, alpha=0.3)
            
            plt.tight_layout()
            st.pyplot(fig)
            
            # Estat√≠sticas de previs√£o
            ultima_data = series_temporal.index[-1]
            ultima_previsao_horas = series_temporal['Previsao_Horas'].iloc[-1]
            ultima_previsao_ocorrencias = series_temporal['Previsao_Ocorrencias'].iloc[-1]
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Previs√£o pr√≥ximo m√™s - Horas de Parada", 
                         f"{ultima_previsao_horas:.1f}h" if not pd.isna(ultima_previsao_horas) else "N/A")
            
            with col2:
                st.metric("Previs√£o pr√≥ximo m√™s - Ocorr√™ncias", 
                         f"{ultima_previsao_ocorrencias:.0f}" if not pd.isna(ultima_previsao_ocorrencias) else "N/A")
            
    except Exception as e:
        st.error(f"Erro ao processar previs√£o de s√©rie temporal: {e}")

# =====================
# An√°lise de Tend√™ncias
# =====================

st.markdown("## üìà An√°lise de Tend√™ncias e Padr√µes")

col1, col2 = st.columns(2)

with col1:
    st.markdown("### üîç Padr√µes de Paradas por Dia da Semana")
    
    if "Data In√≠cio" in filtro.columns:
        filtro['Dia_Semana'] = filtro['Data In√≠cio'].dt.day_name()
        
        # Traduzir dias da semana se necess√°rio
        dias_pt = {
            'Monday': 'Segunda',
            'Tuesday': 'Ter√ßa',
            'Wednesday': 'Quarta',
            'Thursday': 'Quinta',
            'Friday': 'Sexta',
            'Saturday': 'S√°bado',
            'Sunday': 'Domingo'
        }
        filtro['Dia_Semana'] = filtro['Dia_Semana'].map(dias_pt)
        
        paradas_dia = filtro['Dia_Semana'].value_counts()
        
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(x=paradas_dia.values, y=paradas_dia.index, ax=ax, orient='h')
        ax.set_title("Paradas por Dia da Semana", fontweight='bold')
        ax.set_xlabel("N√∫mero de Paradas")
        st.pyplot(fig)
        
        # Identificar dia com mais paradas
        dia_mais_paradas = paradas_dia.idxmax()
        st.info(f"**Dia com mais paradas:** {dia_mais_paradas} ({paradas_dia.max()} ocorr√™ncias)")

with col2:
    st.markdown("### üìä An√°lise de Correla√ß√£o")
    
    # Calcular matriz de correla√ß√£o para dados num√©ricos
    numeric_cols = filtro.select_dtypes(include=[np.number]).columns
    if len(numeric_cols) > 1:
        corr_matrix = filtro[numeric_cols].corr()
        
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0, ax=ax)
        ax.set_title("Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas", fontweight='bold')
        st.pyplot(fig)
        
        # Encontrar correla√ß√µes fortes
        strong_corr = []
        for i in range(len(corr_matrix.columns)):
            for j in range(i+1, len(corr_matrix.columns)):
                if abs(corr_matrix.iloc[i, j]) > 0.5:
                    strong_corr.append((
                        corr_matrix.columns[i], 
                        corr_matrix.columns[j], 
                        corr_matrix.iloc[i, j]
                    ))
        
        if strong_corr:
            st.write("**Correla√ß√µes fortes identificadas:**")
            for corr in strong_corr:
                st.write(f"- {corr[0]} e {corr[1]}: {corr[2]:.2f}")




# =====================
# C√°lculo dos Limites de Controle
# =====================

def calcular_limites_imr(serie_temporal):
    # Gr√°fico de individuais (I)
    media_i = serie_temporal.mean()
    mr = np.abs(serie_temporal.diff()) # Amplitude M√≥vel
    mr_media = mr.mean()
    # Limites de Controle para o gr√°fico I
    lcl_i = media_i - (2.66 * mr_media)
    ucl_i = media_i + (2.66 * mr_media)
    # Limites para o gr√°fico MR (usando constantes D3 e D4 para n=2)
    lcl_mr = 0 # Para n=2, D3=0
    ucl_mr = 3.267 * mr_media
    return media_i, lcl_i, ucl_i, mr_media, lcl_mr, ucl_mr
    

st.markdown("## üìà Controle Estat√≠stico de Processo (CEP)")

# Selecionar o que monitorar: Tempo de Parada ou Contagem de Ocorr√™ncias
variavel_cep = st.selectbox("Selecione a vari√°vel para an√°lise CEP", options=["Tempo de Parada (h)", "N√∫mero de Ocorr√™ncias"])

if variavel_cep == "Tempo de Parada (h)":
    # Preparar dados temporais para I-MR
    dados_cep = filtro[['Data In√≠cio', 'Tempo de Parada (h)']].copy()
    dados_cep.set_index('Data In√≠cio', inplace=True)
    dados_cep.sort_index(inplace=True)

    # Calcular limites
    media_i, lcl_i, ucl_i, mr_media, lcl_mr, ucl_mr = calcular_limites_imr(dados_cep['Tempo de Parada (h)'])

    # Plotar Gr√°fico I
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
    ax1.plot(dados_cep.index, dados_cep['Tempo de Parada (h)'], marker='o', linestyle='-')
    ax1.axhline(media_i, color='g', linestyle='--', label='Linha Central (CL)')
    ax1.axhline(ucl_i, color='r', linestyle='--', label='Limite Superior de Controle (UCL)')
    ax1.axhline(lcl_i, color='r', linestyle='--', label='Limite Inferior de Controle (LCL)')
    ax1.set_title('Gr√°fico de Controle I - Tempo de Parada Individual')
    ax1.set_ylabel('Tempo de Parada (h)')
    ax1.legend()
    ax1.grid(True, alpha=0.3)

    # Plotar Gr√°fico MR
    mr_data = np.abs(dados_cep['Tempo de Parada (h)'].diff())
    ax2.plot(dados_cep.index[1:], mr_data[1:], marker='s', linestyle='-', color='orange')
    ax2.axhline(mr_media, color='g', linestyle='--', label='Linha Central (CL)')
    ax2.axhline(ucl_mr, color='r', linestyle='--', label='Limite Superior de Controle (UCL)')
    ax2.axhline(lcl_mr, color='r', linestyle='--', label='Limite Inferior de Controle (LCL)')
    ax2.set_title('Gr√°fico de Controle MR - Amplitude M√≥vel')
    ax2.set_ylabel('Amplitude M√≥vel (h)')
    ax2.legend()
    ax2.grid(True, alpha=0.3)

    plt.tight_layout()
    st.pyplot(fig)

    # An√°lise de Sinal: Verificar se pontos est√£o fora dos limites de controle
    pontos_fora_limite_i = (dados_cep['Tempo de Parada (h)'] > ucl_i) | (dados_cep['Tempo de Parada (h)'] < lcl_i)
    if pontos_fora_limite_i.any():
        st.warning(f"**Sinal de causa especial detectado:** {pontos_fora_limite_i.sum()} ponto(s) no gr√°fico I est√£o fora dos limites de controle. Investiga√ß√£o recomendada.")
        st.dataframe(dados_cep[pontos_fora_limite_i])



# =====================
# Recomenda√ß√µes Baseadas em Dados
# =====================

st.markdown("## üéØ Recomenda√ß√µes Preditivas")

if "Tempo de Parada (h)" in filtro.columns and "Equipamento" in filtro.columns:
    # An√°lise de equipamentos cr√≠ticos
    equipamento_analysis = filtro.groupby('Equipamento').agg({
        'Tempo de Parada (h)': ['sum', 'mean', 'count']
    }).round(1)
    equipamento_analysis.columns = ['Total_Horas', 'Media_Horas', 'Numero_Ocorrencias']
    equipamento_analysis = equipamento_analysis.sort_values('Total_Horas', ascending=False)
    
    # Top 3 equipamentos com mais horas de parada
    top_equipamentos = equipamento_analysis.head(3)
    
    st.markdown("### ‚ö†Ô∏è Equipamentos Cr√≠ticos")
    st.write("Estes equipamentos demandam aten√ß√£o priorit√°ria devido ao alto tempo total de parada:")
    
    for i, (equipamento, row) in enumerate(top_equipamentos.iterrows(), 1):
        st.markdown(f"""
        <div class="card">
            <h4>{i}. {equipamento}</h4>
            <p>Total de horas paradas: <span class="pred-positive">{row['Total_Horas']}h</span></p>
            <p>N√∫mero de ocorr√™ncias: {row['Numero_Ocorrencias']}</p>
            <p>Tempo m√©dio de parada: {row['Media_Horas']:.1f}h</p>
        </div>
        """, unsafe_allow_html=True)





    
    # Recomenda√ß√µes espec√≠ficas
    st.markdown("### üìã Recomenda√ß√µes de A√ß√£o")
    
    recomendacoes = [
        "Implementar manuten√ß√£o preventiva nos equipamentos cr√≠ticos identificados",
        "Estabelecer plano de revis√£o para equipamentos com maior tempo m√©dio de parada",
        "Criar estoque de pe√ßas de reposi√ß√£o para os equipamentos mais problem√°ticos",
        "Treinar equipe em procedimentos espec√≠ficos para os equipamentos com mais ocorr√™ncias",
        "Monitorar continuamente os equipamentos preditos como de alto risco"
    ]
    
    for rec in recomendacoes:
        st.markdown(f"- {rec}")

# =====================
# Download dos dados filtrados
# =====================

st.markdown("---")
st.markdown("### üì• Exportar Dados Filtrados")

# Converter DataFrame para CSV
csv = filtro.to_csv(index=False).encode('utf-8')

st.download_button(
    label="Baixar dados filtrados como CSV",
    data=csv,
    file_name=f"dados_filtrados_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
    mime="text/csv",
    icon="üì•"
)